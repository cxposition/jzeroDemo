// Code generated by goctl. DO NOT EDIT.

package log

import (
	"context"
	"database/sql"
	"strings"

	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	logFieldNames          = builder.RawFieldNames(&Log{})
	logRows                = strings.Join(logFieldNames, ",")
	logRowsExpectAutoSet   = strings.Join(stringx.Remove(logFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	logRowsWithPlaceHolder = strings.Join(stringx.Remove(logFieldNames, "`uuid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	logModel interface {
		Insert(ctx context.Context, data *Log) (sql.Result, error)
		FindOne(ctx context.Context, uuid string) (*Log, error)
		Update(ctx context.Context, data *Log) error
		Delete(ctx context.Context, uuid string) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, datas []*Log) error
		FindByCondition(ctx context.Context, conds ...condition.Condition) ([]*Log, error)
		FindOneByCondition(ctx context.Context, conds ...condition.Condition) (*Log, error)
		PageByCondition(ctx context.Context, conds ...condition.Condition) ([]*Log, int64, error)
		UpdateFieldsByCondition(ctx context.Context, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, conds ...condition.Condition) error
	}

	defaultLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Log struct {
		Uuid        string `db:"uuid"`
		Operator    string `db:"operator"`
		Ipaddr      string `db:"ipaddr"`
		Actions     string `db:"actions"`
		Contents    string `db:"contents"`
		Status      int64  `db:"status"`
		CreateTime  int64  `db:"create_time"`
		EventType   int64  `db:"event_type"`
		EventLevel  int64  `db:"event_level"`
		AuditStatus int64  `db:"audit_status"`
	}
)

func newLogModel(conn sqlx.SqlConn) *defaultLogModel {
	return &defaultLogModel{
		conn:  conn,
		table: "`log`",
	}
}

func (m *defaultLogModel) Delete(ctx context.Context, uuid string) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`uuid`", uuid))
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *defaultLogModel) FindOne(ctx context.Context, uuid string) (*Log, error) {
	sb := sqlbuilder.Select(logRows).From(m.table)
	sb.Where(sb.EQ("`uuid`", uuid))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp Log
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLogModel) Insert(ctx context.Context, data *Log) (sql.Result, error) {
	sql, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(logRowsExpectAutoSet).
		Values(data.Uuid, data.Operator, data.Ipaddr, data.Actions, data.Contents, data.Status, data.EventType, data.EventLevel, data.AuditStatus).Build()
	ret, err := m.conn.ExecCtx(ctx, sql, args...)
	return ret, err
}

func (m *defaultLogModel) Update(ctx context.Context, data *Log) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(logRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`uuid`", nil))
	sql, _ := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, data.Operator, data.Ipaddr, data.Actions, data.Contents, data.Status, data.EventType, data.EventLevel, data.AuditStatus, data.Uuid)
	return err
}

func (m *defaultLogModel) tableName() string {
	return m.table
}

func (m *customLogModel) BulkInsert(ctx context.Context, datas []*Log) error {
	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(logRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.Uuid, data.Operator, data.Ipaddr, data.Actions, data.Contents, data.Status, data.EventType, data.EventLevel, data.AuditStatus)
	}
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *customLogModel) FindByCondition(ctx context.Context, conds ...condition.Condition) ([]*Log, error) {
	sb := sqlbuilder.Select(logFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	sql, args := sb.Build()

	var resp []*Log
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customLogModel) FindOneByCondition(ctx context.Context, conds ...condition.Condition) (*Log, error) {
	sb := sqlbuilder.Select(logFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	sb.Limit(1)
	sql, args := sb.Build()

	var resp Log
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customLogModel) PageByCondition(ctx context.Context, conds ...condition.Condition) ([]*Log, int64, error) {
	sb := sqlbuilder.Select(logFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	condition.ApplySelect(sb, conds...)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	condition.ApplySelect(countsb, countConds...)

	var resp []*Log

	sql, args := sb.Build()
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	var total int64
	sql, args = countsb.Build()
	err = m.conn.QueryRowCtx(ctx, &total, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customLogModel) UpdateFieldsByCondition(ctx context.Context, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	condition.ApplyUpdate(sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	sb.Set(assigns...)

	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	if err != nil {
		return err
	}
	return nil
}

func (m *customLogModel) DeleteByCondition(ctx context.Context, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	condition.ApplyDelete(sb, conds...)
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}
