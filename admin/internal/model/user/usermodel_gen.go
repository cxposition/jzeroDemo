// Code generated by goctl. DO NOT EDIT.

package user

import (
	"context"
	"database/sql"
	"strings"

	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id uint64) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, datas []*User) error
		FindByCondition(ctx context.Context, conds ...condition.Condition) ([]*User, error)
		FindOneByCondition(ctx context.Context, conds ...condition.Condition) (*User, error)
		PageByCondition(ctx context.Context, conds ...condition.Condition) ([]*User, int64, error)
		UpdateFieldsByCondition(ctx context.Context, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, conds ...condition.Condition) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id   uint64 `db:"id"`
		Name string `db:"name"`
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id uint64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`id`", id))
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id uint64) (*User, error) {
	sb := sqlbuilder.Select(userRows).From(m.table)
	sb.Where(sb.EQ("`id`", id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	sql, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(userRowsExpectAutoSet).
		Values(data.Name).Build()
	ret, err := m.conn.ExecCtx(ctx, sql, args...)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, data *User) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(userRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`id`", nil))
	sql, _ := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, data.Name, data.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}

func (m *customUserModel) BulkInsert(ctx context.Context, datas []*User) error {
	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(userRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.Name)
	}
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *customUserModel) FindByCondition(ctx context.Context, conds ...condition.Condition) ([]*User, error) {
	sb := sqlbuilder.Select(userFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	sql, args := sb.Build()

	var resp []*User
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customUserModel) FindOneByCondition(ctx context.Context, conds ...condition.Condition) (*User, error) {
	sb := sqlbuilder.Select(userFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	sb.Limit(1)
	sql, args := sb.Build()

	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customUserModel) PageByCondition(ctx context.Context, conds ...condition.Condition) ([]*User, int64, error) {
	sb := sqlbuilder.Select(userFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	condition.ApplySelect(sb, conds...)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	condition.ApplySelect(countsb, countConds...)

	var resp []*User

	sql, args := sb.Build()
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	var total int64
	sql, args = countsb.Build()
	err = m.conn.QueryRowCtx(ctx, &total, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customUserModel) UpdateFieldsByCondition(ctx context.Context, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	condition.ApplyUpdate(sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	sb.Set(assigns...)

	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	if err != nil {
		return err
	}
	return nil
}

func (m *customUserModel) DeleteByCondition(ctx context.Context, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	condition.ApplyDelete(sb, conds...)
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}
