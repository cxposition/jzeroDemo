// Code generated by jzero. DO NOT EDIT.
// type: user

package admin

import (
	"admin/admin-go/model/admin/types"
	"context"

	"github.com/jzero-io/restc"
)

var (
	_ = context.Background()
)

type UserGetter interface {
	User() UserInterface
}

type UserInterface interface {
	// API /api/v1/user/add
	Add(ctx context.Context, param types.AddUserRequest) (*types.AddUserResponse, error)
	// API /api/v1/user/delete
	Delete(ctx context.Context, param types.DeleteUserRequest) (*types.DeleteUserResponse, error)
	// API /api/v1/user/list
	List(ctx context.Context, param types.ListUserRequest) (*types.ListUserResponse, error)
	// API /api/v1/user/modify
	Modify(ctx context.Context, param types.ModifyUserRequest) (*types.ModifyUserResponse, error)

	UserExpansion
}

type userClient struct {
	client restc.Interface
}

func newUserClient(c *AdminClient) *userClient {
	return &userClient{
		client: c.RESTClient(),
	}
}

func (x *userClient) Add(ctx context.Context, param types.AddUserRequest) (*types.AddUserResponse, error) {
	var resp *types.AddUserResponse
	err := x.client.Verb("POST").
		SubPath(
			"/api/v1/user/add",
		).
		Params().
		Body(param).
		Do(ctx).
		Into(&resp, true)

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (x *userClient) Delete(ctx context.Context, param types.DeleteUserRequest) (*types.DeleteUserResponse, error) {
	var resp *types.DeleteUserResponse
	err := x.client.Verb("DELETE").
		SubPath(
			"/api/v1/user/delete",
		).
		Params().
		Body(nil).
		Do(ctx).
		Into(&resp, true)

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (x *userClient) List(ctx context.Context, param types.ListUserRequest) (*types.ListUserResponse, error) {
	var resp *types.ListUserResponse
	err := x.client.Verb("GET").
		SubPath(
			"/api/v1/user/list",
		).
		Params(
			restc.QueryParam{Name: "page", Value: param.Page},
			restc.QueryParam{Name: "size", Value: param.Size},
		).
		Do(ctx).
		Into(&resp, true)

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (x *userClient) Modify(ctx context.Context, param types.ModifyUserRequest) (*types.ModifyUserResponse, error) {
	var resp *types.ModifyUserResponse
	err := x.client.Verb("PUT").
		SubPath(
			"/api/v1/user/modify",
		).
		Params().
		Body(nil).
		Do(ctx).
		Into(&resp, true)

	if err != nil {
		return nil, err
	}

	return resp, nil
}
